/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package passportcheck;

import java.awt.CardLayout;
import java.awt.Color;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.net.URISyntaxException;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JComboBox;
import javax.swing.JLabel;
import javax.swing.JTextField;
import net.coobird.thumbnailator.Thumbnails;
import org.jdesktop.swingx.prompt.PromptSupport;
/**
 *
 * @author ntko
 * TODO: - add passport MRZ crop tool for second window
 *       - passport PDF to JPG then authenticated passport back to PDF
 */
public class PassportCheck extends javax.swing.JFrame {
    String surname = "";
    String givenName = "";
    String passportNumber = "";
    String dateOfBirth = "";
    String nationality = "";
    String country = "";
    String gender = "";
    String expiryDate = "";
    String personalNumber = "";
    boolean nextPage = true;

    public PassportCheck() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mainPanel = new javax.swing.JPanel();
        panelCandidateInput = new javax.swing.JPanel();
        surnameLabel = new javax.swing.JLabel();
        givenNameLabel = new javax.swing.JLabel();
        dateOfBirthLabel = new javax.swing.JLabel();
        passportNumberLabel = new javax.swing.JLabel();
        nationalityLabel = new javax.swing.JLabel();
        countryLabel = new javax.swing.JLabel();
        genderLabel = new javax.swing.JLabel();
        expiryLabel = new javax.swing.JLabel();
        personalNumberLabel = new javax.swing.JLabel();
        surnameInput = new javax.swing.JTextField();
        givenNameInput = new javax.swing.JTextField();
        dateOfBirthInput = new javax.swing.JFormattedTextField();
        passportNumberInput = new javax.swing.JTextField();
        nationalityInput = new javax.swing.JComboBox<>();
        countryInput = new javax.swing.JComboBox<>();
        genderInput = new javax.swing.JComboBox<>();
        expiryInput = new javax.swing.JFormattedTextField();
        personalNumberInput = new javax.swing.JTextField();
        panelResultsPage = new javax.swing.JPanel();
        panelPassportNumber = new javax.swing.JPanel();
        mrzLineOne = new javax.swing.JLabel();
        mrzPassportNumber = new javax.swing.JLabel();
        mrzChecksumOne = new javax.swing.JLabel();
        mrzCountry = new javax.swing.JLabel();
        mrzDateOfBirth = new javax.swing.JLabel();
        mrzChecksumTwo = new javax.swing.JLabel();
        mrzGender = new javax.swing.JLabel();
        mrzExpiryDate = new javax.swing.JLabel();
        mrzChecksumThree = new javax.swing.JLabel();
        mrzPersonalNumber = new javax.swing.JLabel();
        mrzChecksumFour = new javax.swing.JLabel();
        mrzChecksumFive = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        noButton = new javax.swing.JButton();
        yesButton = new javax.swing.JButton();
        mrzPictureComparison = new javax.swing.JLabel();
        panelButtonBar = new javax.swing.JPanel();
        submitButton = new javax.swing.JButton();
        backButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(0, 0, 0));
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setForeground(java.awt.Color.white);
        setMinimumSize(new java.awt.Dimension(655, 355));
        setResizable(false);
        setSize(new java.awt.Dimension(655, 355));

        mainPanel.setForeground(new java.awt.Color(240, 240, 240));
        mainPanel.setLayout(new java.awt.CardLayout());

        panelCandidateInput.setBackground(new java.awt.Color(255, 255, 255));

        surnameLabel.setFont(new java.awt.Font("Ebrima", 1, 12)); // NOI18N
        surnameLabel.setText("Surname");
        surnameLabel.setMaximumSize(new java.awt.Dimension(81, 15));
        surnameLabel.setMinimumSize(new java.awt.Dimension(81, 15));

        givenNameLabel.setFont(new java.awt.Font("Ebrima", 1, 12)); // NOI18N
        givenNameLabel.setText("Given names");
        givenNameLabel.setMaximumSize(new java.awt.Dimension(81, 15));
        givenNameLabel.setMinimumSize(new java.awt.Dimension(81, 15));

        dateOfBirthLabel.setFont(new java.awt.Font("Ebrima", 1, 12)); // NOI18N
        dateOfBirthLabel.setText("Date of birth");
        dateOfBirthLabel.setMaximumSize(new java.awt.Dimension(81, 15));
        dateOfBirthLabel.setMinimumSize(new java.awt.Dimension(81, 15));

        passportNumberLabel.setFont(new java.awt.Font("Ebrima", 1, 12)); // NOI18N
        passportNumberLabel.setText("Passport No.");

        nationalityLabel.setFont(new java.awt.Font("Ebrima", 1, 12)); // NOI18N
        nationalityLabel.setText("Nationality");
        nationalityLabel.setMaximumSize(new java.awt.Dimension(81, 15));
        nationalityLabel.setMinimumSize(new java.awt.Dimension(81, 15));

        countryLabel.setFont(new java.awt.Font("Ebrima", 1, 12)); // NOI18N
        countryLabel.setText("Issuing Country");

        genderLabel.setFont(new java.awt.Font("Ebrima", 1, 12)); // NOI18N
        genderLabel.setText("Gender");

        expiryLabel.setFont(new java.awt.Font("Ebrima", 1, 12)); // NOI18N
        expiryLabel.setText("Expiry date");

        personalNumberLabel.setFont(new java.awt.Font("Ebrima", 1, 12)); // NOI18N
        personalNumberLabel.setText("Personal number");

        surnameInput.setText("Testerson");
        surnameInput.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(122, 122, 122)));

        givenNameInput.setText("Testy McTesting");
        givenNameInput.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(122, 122, 122)));

        dateOfBirthInput.setDocument(new JTextFieldLimit(10));
        dateOfBirthInput.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.DateFormatter(new java.text.SimpleDateFormat("dd/MM/yyyy"))));
        dateOfBirthInput.setText("01/01/1991");
        dateOfBirthInput.setCaretColor(new java.awt.Color(255, 255, 255));
        PromptSupport.setPrompt("DD/MM/YYYY", dateOfBirthInput);

        passportNumberInput.setDocument(new JTextFieldLimit(9));
        passportNumberInput.setText("123456789");
        passportNumberInput.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(122, 122, 122)));

        nationalityInput.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select", "Afghanistan", "Albania", "Algeria", "American Samoa", "Andorra", "Angola", "Anguilla", "Antarctica", "Antigua and Barbuda", "Argentina", "Armenia", "Aruba", "Australia", "Austria", "Azerbaijan", "Bahamas", "Bahrain", "Bangladesh", "Barbados", "Belarus", "Belgium", "Belize", "Benin", "Bermuda", "Bhutan", "Bolivia", "Bosnia and Herzegovina", "Botswana", "Bouvet Island", "Brazil", "British Indian Ocean Territory", "Brunei Darussalam", "Bulgaria", "Burkina Faso", "Burundi", "Cambodia", "Cameroon", "Canada", "Cape Verde", "Cayman Islands", "Central African Republic", "Chad", "Chile", "China", "Christmas Island", "Cocos (Keeling) Islands", "Colombia", "Comoros", "Congo", "Cook Islands", "Costa Rica", "Cï¿½te d'Ivoire", "Croatia", "Cuba", "Cyprus", "Czech Republic", "Democratic People's Republic of Korea", "Democratic Republic of the Congo", "Denmark", "Djibouti", "Dominica", "Dominican Republic", "East Timor", "Ecuador", "Egypt", "El Salvador", "Equatorial Guinea", "Eritrea", "Estonia", "Ethiopia", "Falkland Islands (Malvinas)", "Faeroe Islands", "Fiji", "Finland", "France", "France - Metropolitan", "French Guiana", "French Polynesia", "Gabon", "Gambia", "Georgia", "Germany", "Ghana", "Gibraltar", "Greece", "Greenland", "Grenada", "Guadeloupe", "Guam", "Guatemala", "Guinea", "Guinea-Bissau", "Guyana", "Haiti", "Heard and McDonald Islands", "Holy See (Vatican City State)", "Honduras", "Hong Kong", "Hungary", "Iceland", "India", "Indonesia", "Iran, Islamic Republic of", "Iraq", "Ireland", "Israel", "Italy", "Jamaica", "Japan", "Jordan", "Kazakhstan", "Kenya", "Kiribati", "Kuwait", "Kyrgyzstan", "Lao People's Democratic Republic", "Latvia", "Lebanon", "Lesotho", "Liberia", "Libyan Arab Jamahiriya", "Liechtenstein", "Lithuania", "Luxembourg", "Madagascar", "Malawi", "Malaysia", "Maldives", "Mali", "Malta", "Marshall Islands", "Martinique", "Mauritania", "Mauritius", "Mayotte", "Mexico", "Micronesia, Federated States of", "Monaco", "Mongolia", "Montserrat", "Morocco", "Mozambique", "Myanmar", "Namibia", "Nauru", "Nepal", "Netherlands, Kingdom of the", "Netherlands Antilles", "Neutral Zone", "New Caledonia", "New Zealand", "Nicaragua", "Niger", "Nigeria", "Niue", "Norfolk Island", "Northern Mariana Islands", "Norway", "Oman", "Pakistan", "Palau", "Panama", "Papua New Guinea", "Paraguay", "Peru", "Philippines", "Pitcairn", "Poland", "Portugal", "Puerto Rico", "Qatar", "Republic of Korea", "Republic of Moldova", "Réunion", "Romania", "Russian Federation", "Rwanda", "Saint Helena", "Saint Kitts and Nevis", "Saint Lucia", "Saint Pierre and Miquelon", "Saint Vincent and the Grenadines", "Samoa", "San Marino", "Sao Tome and Principe", "Saudi Arabia", "Senegal", "Seychelles", "Sierra Leone", "Singapore", "Slovakia", "Slovenia", "Solomon Islands", "Somalia", "South Africa", "South Georgia and the South Sandwich Island", "Spain", "Sri Lanka", "Sudan", "Suriname", "Svalbard and Jan Mayen Islands", "Swaziland", "Sweden", "Switzerland", "Syrian Arab Republic", "Taiwan Province of China", "Tajikistan", "Thailand", "The former Yugoslav Republic of Macedonia", "Togo", "Tokelau", "Tonga", "Trinidad and Tobago", "Tunisia", "Turkey", "Turkmenistan", "Turks and Caicos Islands", "Tuvalu", "Uganda", "Ukraine", "United Arab Emirates", "United Kingdom - Citizen", "United Kingdom -Dependent territories citizen", "United Kingdom -National (overseas)", "United Kingdom -Overseas citizen", "United Kingdom -Protected Person", "United Kingdom -Subject", "United Republic of Tanzania", "United States of America", "United States of America Minor Outlying Islands", "Uruguay", "Uzbekistan", "Vanuatu", "Venezuela", "Viet Nam", "Virgin Islands (Great Britian)", "Virgin Islands (United States)", "Wallis and Futuna Islands", "Western Sahara", "Yemen", "Zaire", "Zambia", "Zimbabwe" }));

        countryInput.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select", "Afghanistan", "Albania", "Algeria", "American Samoa", "Andorra", "Angola", "Anguilla", "Antarctica", "Antigua and Barbuda", "Argentina", "Armenia", "Aruba", "Australia", "Austria", "Azerbaijan", "Bahamas", "Bahrain", "Bangladesh", "Barbados", "Belarus", "Belgium", "Belize", "Benin", "Bermuda", "Bhutan", "Bolivia", "Bosnia and Herzegovina", "Botswana", "Bouvet Island", "Brazil", "British Indian Ocean Territory", "Brunei Darussalam", "Bulgaria", "Burkina Faso", "Burundi", "Cambodia", "Cameroon", "Canada", "Cape Verde", "Cayman Islands", "Central African Republic", "Chad", "Chile", "China", "Christmas Island", "Cocos (Keeling) Islands", "Colombia", "Comoros", "Congo", "Cook Islands", "Costa Rica", "Cï¿½te d'Ivoire", "Croatia", "Cuba", "Cyprus", "Czech Republic", "Democratic People's Republic of Korea", "Democratic Republic of the Congo", "Denmark", "Djibouti", "Dominica", "Dominican Republic", "East Timor", "Ecuador", "Egypt", "El Salvador", "Equatorial Guinea", "Eritrea", "Estonia", "Ethiopia", "Falkland Islands (Malvinas)", "Faeroe Islands", "Fiji", "Finland", "France", "France - Metropolitan", "French Guiana", "French Polynesia", "Gabon", "Gambia", "Georgia", "Germany", "Ghana", "Gibraltar", "Greece", "Greenland", "Grenada", "Guadeloupe", "Guam", "Guatemala", "Guinea", "Guinea-Bissau", "Guyana", "Haiti", "Heard and McDonald Islands", "Holy See (Vatican City State)", "Honduras", "Hong Kong", "Hungary", "Iceland", "India", "Indonesia", "Iran, Islamic Republic of", "Iraq", "Ireland", "Israel", "Italy", "Jamaica", "Japan", "Jordan", "Kazakhstan", "Kenya", "Kiribati", "Kuwait", "Kyrgyzstan", "Lao People's Democratic Republic", "Latvia", "Lebanon", "Lesotho", "Liberia", "Libyan Arab Jamahiriya", "Liechtenstein", "Lithuania", "Luxembourg", "Madagascar", "Malawi", "Malaysia", "Maldives", "Mali", "Malta", "Marshall Islands", "Martinique", "Mauritania", "Mauritius", "Mayotte", "Mexico", "Micronesia, Federated States of", "Monaco", "Mongolia", "Montserrat", "Morocco", "Mozambique", "Myanmar", "Namibia", "Nauru", "Nepal", "Netherlands, Kingdom of the", "Netherlands Antilles", "Neutral Zone", "New Caledonia", "New Zealand", "Nicaragua", "Niger", "Nigeria", "Niue", "Norfolk Island", "Northern Mariana Islands", "Norway", "Oman", "Pakistan", "Palau", "Panama", "Papua New Guinea", "Paraguay", "Peru", "Philippines", "Pitcairn", "Poland", "Portugal", "Puerto Rico", "Qatar", "Republic of Korea", "Republic of Moldova", "Réunion", "Romania", "Russian Federation", "Rwanda", "Saint Helena", "Saint Kitts and Nevis", "Saint Lucia", "Saint Pierre and Miquelon", "Saint Vincent and the Grenadines", "Samoa", "San Marino", "Sao Tome and Principe", "Saudi Arabia", "Senegal", "Seychelles", "Sierra Leone", "Singapore", "Slovakia", "Slovenia", "Solomon Islands", "Somalia", "South Africa", "South Georgia and the South Sandwich Island", "Spain", "Sri Lanka", "Sudan", "Suriname", "Svalbard and Jan Mayen Islands", "Swaziland", "Sweden", "Switzerland", "Syrian Arab Republic", "Taiwan Province of China", "Tajikistan", "Thailand", "The former Yugoslav Republic of Macedonia", "Togo", "Tokelau", "Tonga", "Trinidad and Tobago", "Tunisia", "Turkey", "Turkmenistan", "Turks and Caicos Islands", "Tuvalu", "Uganda", "Ukraine", "United Arab Emirates", "United Kingdom - Citizen", "United Kingdom -Dependent territories citizen", "United Kingdom -National (overseas)", "United Kingdom -Overseas citizen", "United Kingdom -Protected Person", "United Kingdom -Subject", "United Republic of Tanzania", "United States of America", "United States of America Minor Outlying Islands", "Uruguay", "Uzbekistan", "Vanuatu", "Venezuela", "Viet Nam", "Virgin Islands (Great Britian)", "Virgin Islands (United States)", "Wallis and Futuna Islands", "Western Sahara", "Yemen", "Zaire", "Zambia", "Zimbabwe" }));
        countryInput.setToolTipText("");

        genderInput.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select", "Male", "Female" }));

        expiryInput.setDocument(new JTextFieldLimit(10));
        expiryInput.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.DateFormatter(new java.text.SimpleDateFormat("dd/MM/yyyy"))));
        expiryInput.setText("20/02/2020");
        expiryInput.setCaretColor(new java.awt.Color(255, 255, 255));
        PromptSupport.setPrompt("DD/MM/YYYY", expiryInput);

        personalNumberInput.setDocument(new JTextFieldLimit(16));
        personalNumberInput.setText("<<<<<<<<<<<<<<01");
        personalNumberInput.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(122, 122, 122)));

        javax.swing.GroupLayout panelCandidateInputLayout = new javax.swing.GroupLayout(panelCandidateInput);
        panelCandidateInput.setLayout(panelCandidateInputLayout);
        panelCandidateInputLayout.setHorizontalGroup(
            panelCandidateInputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelCandidateInputLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelCandidateInputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(personalNumberLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 108, Short.MAX_VALUE)
                    .addComponent(genderLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(nationalityLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(dateOfBirthLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(givenNameLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(surnameLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelCandidateInputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(givenNameInput)
                    .addComponent(surnameInput)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelCandidateInputLayout.createSequentialGroup()
                        .addGroup(panelCandidateInputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(nationalityInput, javax.swing.GroupLayout.Alignment.LEADING, 0, 204, Short.MAX_VALUE)
                            .addComponent(genderInput, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(personalNumberInput, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(dateOfBirthInput, javax.swing.GroupLayout.Alignment.LEADING))
                        .addGap(74, 74, 74)
                        .addGroup(panelCandidateInputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(countryLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 93, Short.MAX_VALUE)
                            .addComponent(expiryLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(passportNumberLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(26, 26, 26)
                        .addGroup(panelCandidateInputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(passportNumberInput)
                            .addComponent(countryInput, 0, 191, Short.MAX_VALUE)
                            .addComponent(expiryInput))))
                .addContainerGap())
        );
        panelCandidateInputLayout.setVerticalGroup(
            panelCandidateInputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelCandidateInputLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelCandidateInputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(surnameInput)
                    .addComponent(surnameLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelCandidateInputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(givenNameInput)
                    .addComponent(givenNameLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelCandidateInputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelCandidateInputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(dateOfBirthLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(dateOfBirthInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(panelCandidateInputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(passportNumberInput)
                        .addComponent(passportNumberLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelCandidateInputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(nationalityLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(panelCandidateInputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE, false)
                        .addComponent(countryLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(countryInput)
                        .addComponent(nationalityInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelCandidateInputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelCandidateInputLayout.createSequentialGroup()
                        .addComponent(genderLabel)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(genderInput)
                    .addComponent(expiryLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(expiryInput))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelCandidateInputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(personalNumberLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(personalNumberInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(318, 318, 318))
        );

        mainPanel.add(panelCandidateInput, "panelOne");

        panelResultsPage.setForeground(new java.awt.Color(240, 240, 240));

        panelPassportNumber.setBackground(new java.awt.Color(204, 204, 204));

        mrzLineOne.setFont(new java.awt.Font("Monospaced", 0, 18)); // NOI18N
        mrzLineOne.setText("P<GBRTESTERSON<<TESTY<MCTESTING<<<<<<<<<<<<<");
        mrzLineOne.setFocusable(false);
        mrzLineOne.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        mrzPassportNumber.setFont(new java.awt.Font("Monospaced", 0, 18)); // NOI18N
        mrzPassportNumber.setText("123456789");

        mrzChecksumOne.setBackground(new java.awt.Color(255, 153, 102));
        mrzChecksumOne.setFont(new java.awt.Font("Monospaced", 0, 18)); // NOI18N
        mrzChecksumOne.setText("1");
        mrzChecksumOne.setOpaque(true);

        mrzCountry.setFont(new java.awt.Font("Monospaced", 0, 18)); // NOI18N
        mrzCountry.setText("GBR");

        mrzDateOfBirth.setFont(new java.awt.Font("Monospaced", 0, 18)); // NOI18N
        mrzDateOfBirth.setText("840101");

        mrzChecksumTwo.setBackground(new java.awt.Color(255, 153, 102));
        mrzChecksumTwo.setFont(new java.awt.Font("Monospaced", 0, 18)); // NOI18N
        mrzChecksumTwo.setText("2");
        mrzChecksumTwo.setOpaque(true);

        mrzGender.setFont(new java.awt.Font("Monospaced", 0, 18)); // NOI18N
        mrzGender.setText("M");

        mrzExpiryDate.setFont(new java.awt.Font("Monospaced", 0, 18)); // NOI18N
        mrzExpiryDate.setText("200101");

        mrzChecksumThree.setBackground(new java.awt.Color(255, 153, 102));
        mrzChecksumThree.setFont(new java.awt.Font("Monospaced", 0, 18)); // NOI18N
        mrzChecksumThree.setText("3");
        mrzChecksumThree.setOpaque(true);

        mrzPersonalNumber.setFont(new java.awt.Font("Monospaced", 0, 18)); // NOI18N
        mrzPersonalNumber.setText("<<<<<<<<<<<<<<");

        mrzChecksumFour.setBackground(new java.awt.Color(255, 153, 102));
        mrzChecksumFour.setFont(new java.awt.Font("Monospaced", 0, 18)); // NOI18N
        mrzChecksumFour.setText("0");
        mrzChecksumFour.setOpaque(true);

        mrzChecksumFive.setBackground(new java.awt.Color(255, 153, 102));
        mrzChecksumFive.setFont(new java.awt.Font("Monospaced", 0, 18)); // NOI18N
        mrzChecksumFive.setText("0");
        mrzChecksumFive.setOpaque(true);

        javax.swing.GroupLayout panelPassportNumberLayout = new javax.swing.GroupLayout(panelPassportNumber);
        panelPassportNumber.setLayout(panelPassportNumberLayout);
        panelPassportNumberLayout.setHorizontalGroup(
            panelPassportNumberLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(mrzLineOne, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(panelPassportNumberLayout.createSequentialGroup()
                .addComponent(mrzPassportNumber)
                .addGap(0, 0, 0)
                .addComponent(mrzChecksumOne)
                .addGap(0, 0, 0)
                .addComponent(mrzCountry)
                .addGap(0, 0, 0)
                .addComponent(mrzDateOfBirth)
                .addGap(0, 0, 0)
                .addComponent(mrzChecksumTwo)
                .addGap(0, 0, 0)
                .addComponent(mrzGender)
                .addGap(0, 0, 0)
                .addComponent(mrzExpiryDate)
                .addGap(0, 0, 0)
                .addComponent(mrzChecksumThree)
                .addGap(0, 0, 0)
                .addComponent(mrzPersonalNumber)
                .addGap(0, 0, 0)
                .addComponent(mrzChecksumFour)
                .addGap(0, 0, 0)
                .addComponent(mrzChecksumFive))
        );
        panelPassportNumberLayout.setVerticalGroup(
            panelPassportNumberLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelPassportNumberLayout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addComponent(mrzLineOne, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addGroup(panelPassportNumberLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(mrzPassportNumber, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(mrzChecksumOne, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(mrzCountry, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(mrzDateOfBirth, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(mrzChecksumTwo, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(mrzGender, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(mrzExpiryDate, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(mrzChecksumThree, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(mrzPersonalNumber, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(mrzChecksumFour, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(mrzChecksumFive, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 0, 0))
        );

        jLabel2.setText("Do the highlighted check digits above match the original passport?");
        jLabel2.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        noButton.setText("No");

        yesButton.setText("Yes");
        yesButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                yesButtonActionPerformed(evt);
            }
        });

        try {
            String path = "./resources/";
            BufferedImage mrzImage = new BufferedImage(82, 484, BufferedImage.TYPE_INT_RGB);
            mrzImage = ImageIO.read(new File(path, "mrz.jpg"));
            ImageIcon icon = new ImageIcon(mrzImage);
            mrzPictureComparison.setIcon(icon);
        } catch (IOException ex) {
            Logger.getLogger(PassportAuthenticator.class.getName()).log(Level.SEVERE, null, ex);
        }
        mrzPictureComparison.setMinimumSize(new java.awt.Dimension(82, 484));

        javax.swing.GroupLayout panelResultsPageLayout = new javax.swing.GroupLayout(panelResultsPage);
        panelResultsPage.setLayout(panelResultsPageLayout);
        panelResultsPageLayout.setHorizontalGroup(
            panelResultsPageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelResultsPageLayout.createSequentialGroup()
                .addGap(120, 120, 120)
                .addGroup(panelResultsPageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelResultsPageLayout.createSequentialGroup()
                        .addComponent(noButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(yesButton))
                    .addComponent(panelPassportNumber, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(mrzPictureComparison, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(128, Short.MAX_VALUE))
        );
        panelResultsPageLayout.setVerticalGroup(
            panelResultsPageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelResultsPageLayout.createSequentialGroup()
                .addGap(40, 40, 40)
                .addComponent(mrzPictureComparison, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 42, Short.MAX_VALUE)
                .addComponent(panelPassportNumber, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel2)
                .addGap(12, 12, 12)
                .addGroup(panelResultsPageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(noButton)
                    .addComponent(yesButton))
                .addContainerGap())
        );

        mainPanel.add(panelResultsPage, "panelTwo");

        submitButton.setText("Submit");
        submitButton.setBorder(null);
        submitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                submitButtonActionPerformed(evt);
            }
        });

        backButton.setText("Back");
        backButton.setBorder(null);
        backButton.setEnabled(false);
        backButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelButtonBarLayout = new javax.swing.GroupLayout(panelButtonBar);
        panelButtonBar.setLayout(panelButtonBarLayout);
        panelButtonBarLayout.setHorizontalGroup(
            panelButtonBarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelButtonBarLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(backButton, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(submitButton, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        panelButtonBarLayout.setVerticalGroup(
            panelButtonBarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelButtonBarLayout.createSequentialGroup()
                .addGap(3, 3, 3)
                .addGroup(panelButtonBarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(backButton, javax.swing.GroupLayout.DEFAULT_SIZE, 27, Short.MAX_VALUE)
                    .addComponent(submitButton, javax.swing.GroupLayout.DEFAULT_SIZE, 27, Short.MAX_VALUE)))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(mainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(panelButtonBar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(mainPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 313, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(panelButtonBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        mainPanel.getAccessibleContext().setAccessibleName("");
        mainPanel.getAccessibleContext().setAccessibleDescription("");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void submitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_submitButtonActionPerformed

        nextPage = true;
        JTextField[] textFieldArray = new JTextField[] {dateOfBirthInput, 
            expiryInput, passportNumberInput, personalNumberInput, 
            surnameInput, givenNameInput};
        JLabel[] textFieldLabelArray = new JLabel[] {dateOfBirthLabel, 
            expiryLabel, passportNumberLabel, personalNumberLabel, 
            surnameLabel, givenNameLabel};
        JComboBox[] comboBoxArray = new JComboBox[]{nationalityInput, countryInput, genderInput};
        JLabel[] comboBoxLabelArray = new JLabel[]{nationalityLabel, countryLabel, genderLabel};
        
        for(int i = 0; i < textFieldArray.length; i++){
            String label = textFieldLabelArray[i].getText();
            int textLength = textFieldArray[i].getText().trim().length();
            boolean incorrectInput = false;
            // checks for correct character length
            switch(i){
                case 0:
                case 1:{
                    if(textLength != 10) {
                        incorrectInput = true;
                    }
                    break;
                }
                case 2:{
                    if(textLength != 9) {
                        incorrectInput = true;
                    }
                    break;
                }
                case 3:{
                    if(textLength != 16) {
                        incorrectInput = true;
                    }
                    break;
                }
                default:{
                    if(textLength == 0){
                        incorrectInput = true;
                    }
                    break;
                }
            }
            if(incorrectInput){
                if(label.charAt(label.length() - 1) != '*'){
                    textFieldLabelArray[i].setText(label + '*');
                }
                textFieldLabelArray[i].setForeground(Color.RED);
                nextPage = false;
            }
        }
        for(int i = 0; i < comboBoxArray.length; i++) {
            if(comboBoxArray[i].getSelectedIndex() == 0){
                String label = comboBoxLabelArray[i].getText();
                if(label.charAt(label.length() - 1) != '*'){
                    comboBoxLabelArray[i].setText(label + '*');
                }
                comboBoxLabelArray[i].setForeground(Color.RED);
                nextPage = false;
            }
        }
        
        if(nextPage){
            surname = surnameInput.getText();
            givenName = givenNameInput.getText();
            DateFormat userInput = new SimpleDateFormat("dd/MM/yyyy");
            DateFormat formatNeeded = new SimpleDateFormat("yyMMdd");
            Date dob = null;
            Date exp = null;
            try {
                dob = userInput.parse(dateOfBirthInput.getText());
                exp = userInput.parse(expiryInput.getText());
            } catch (ParseException ex) {
                Logger.getLogger(PassportCheck.class.getName()).log(Level.SEVERE, null, ex);
            }
            dateOfBirth = formatNeeded.format(dob);
            expiryDate = formatNeeded.format(exp);
            passportNumber = passportNumberInput.getText();
            int genderIndex = genderInput.getSelectedIndex();
            switch (genderIndex) {
                case 1:
                    gender = "M";
                    break;
                case 2:
                    gender = "F";
                    break;
                default:
                    gender = "ERROR";
                    break;
            }
            personalNumber = personalNumberInput.getText();
            
            int nationalityIndex = nationalityInput.getSelectedIndex();
            nationalityIndex -= 1;  // -1 to offset Select
            int countryIndex = countryInput.getSelectedIndex();
            countryIndex -= 1;  // -1 to offset Select
            CountryCode code = new CountryCode();
            nationality = code.toCode(nationalityIndex); 
            country = code.toCode(countryIndex);
            
            boolean ukCitizen = nationalityIndex == 221; // 221 = UK citizen. Code is always <<<<<<<<<<<<<0 or equal to 0
            if(ukCitizen){
                personalNumber = "<<<<<<<<<<<<<<<<";
            }
            StringBuilder pn = new StringBuilder(personalNumber);
            pn.delete(14, 16);
            
            personalNumber = pn.toString();
            String firstLine = "P<" + nationality + surname + "<<" + givenName;
            StringBuilder sb = new StringBuilder(firstLine);
            for(int i =0; i < sb.length(); i++){
                if(sb.charAt(i) == 'æ' || sb.charAt(i) == 'Æ') {
                    sb.setCharAt(i, 'A');
                    sb.insert(i, 'E');
                }
                if(sb.charAt(i) == 'ø' || sb.charAt(i) == 'Ø' || sb.charAt(i) == 'œ'|| sb.charAt(i) == 'Œ' ) {
                    sb.setCharAt(i, 'O');
                    sb.insert(i, 'E');
                }
                if(sb.charAt(i) == 'ß') {
                    sb.setCharAt(i, 'S');
                    sb.insert(i, 'S');
                }
                if(sb.charAt(i) == 'þ' || sb.charAt(i) == 'Þ') {
                    sb.setCharAt(i, 'T');
                    sb.insert(i, 'H');
                }
                if(!Character.isDigit(sb.charAt(i)) && !Character.isLetter(sb.charAt(i))) {
                    sb.setCharAt(i, '<');
                }
            }
            int remainingChars = 44-sb.length();
            if(sb.length() > 44){
                sb.delete(45, sb.length());
            }
            else {
                for(int i = 0; i < remainingChars; i++) {
                    sb.append('<');
                }
            }
            ChecksumCalculator cc = new ChecksumCalculator();
            int checksumOne = cc.Checksum(passportNumber);
            int checksumTwo = cc.Checksum(dateOfBirth);
            int checksumThree = cc.Checksum(expiryDate);
            int checksumFour = cc.Checksum(personalNumber);
            int checksumFive = cc.Checksum(passportNumber + checksumOne + dateOfBirth
                                + checksumTwo + expiryDate + checksumThree + personalNumber);
            
            mrzLineOne.setText(sb.toString().toUpperCase());
            mrzPassportNumber.setText(passportNumber);
            mrzChecksumOne.setText(Integer.toString(checksumOne));
            mrzCountry.setText(country);
            mrzDateOfBirth.setText(dateOfBirth);
            mrzChecksumTwo.setText(Integer.toString(checksumTwo));
            mrzGender.setText(gender);
            mrzExpiryDate.setText(expiryDate);
            mrzChecksumThree.setText(Integer.toString(checksumThree));
            mrzPersonalNumber.setText(personalNumber);
            mrzChecksumFour.setText(Integer.toString(checksumFour));
            mrzChecksumFive.setText(Integer.toString(checksumFive));
            

            CardLayout card = (CardLayout)mainPanel.getLayout();
            card.show(mainPanel, "panelTwo");
            backButton.setEnabled(true);
            submitButton.setEnabled(false);
        }
    }//GEN-LAST:event_submitButtonActionPerformed

    private void backButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backButtonActionPerformed
        JLabel[] jl = new JLabel[] {surnameLabel, givenNameLabel, dateOfBirthLabel,
            passportNumberLabel, nationalityLabel, countryLabel, genderLabel,
            expiryLabel, personalNumberLabel};
        for (JLabel jl1 : jl) {
            String label = jl1.getText();
            if (label.charAt(label.length() - 1) == '*') {
                label = label.substring(0, label.length()-1);
                jl1.setText(label);
                jl1.setForeground(Color.black);
            }
        }
        
        CardLayout card = (CardLayout)mainPanel.getLayout();
        card.show(mainPanel, "panelOne");
        backButton.setEnabled(false);
        submitButton.setEnabled(true);
    }//GEN-LAST:event_backButtonActionPerformed

    private void yesButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_yesButtonActionPerformed
        yesButton.setEnabled(false);
        PassportAuthenticator pa = new PassportAuthenticator();
        pa.Authenticate();
        /** Copy the passport PDF
         *  add a green verified tick.
         * 
         */
        new PassportPopup().setVisible(true);
        
        this.dispose();
    }//GEN-LAST:event_yesButtonActionPerformed

    /**
     * @param args the command line arguments
     */


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton backButton;
    private javax.swing.JComboBox<String> countryInput;
    private javax.swing.JLabel countryLabel;
    private javax.swing.JFormattedTextField dateOfBirthInput;
    private javax.swing.JLabel dateOfBirthLabel;
    private javax.swing.JFormattedTextField expiryInput;
    private javax.swing.JLabel expiryLabel;
    private javax.swing.JComboBox<String> genderInput;
    private javax.swing.JLabel genderLabel;
    private javax.swing.JTextField givenNameInput;
    private javax.swing.JLabel givenNameLabel;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JLabel mrzChecksumFive;
    private javax.swing.JLabel mrzChecksumFour;
    private javax.swing.JLabel mrzChecksumOne;
    private javax.swing.JLabel mrzChecksumThree;
    private javax.swing.JLabel mrzChecksumTwo;
    private javax.swing.JLabel mrzCountry;
    private javax.swing.JLabel mrzDateOfBirth;
    private javax.swing.JLabel mrzExpiryDate;
    private javax.swing.JLabel mrzGender;
    private javax.swing.JLabel mrzLineOne;
    private javax.swing.JLabel mrzPassportNumber;
    private javax.swing.JLabel mrzPersonalNumber;
    private javax.swing.JLabel mrzPictureComparison;
    private javax.swing.JComboBox<String> nationalityInput;
    private javax.swing.JLabel nationalityLabel;
    private javax.swing.JButton noButton;
    private javax.swing.JPanel panelButtonBar;
    private javax.swing.JPanel panelCandidateInput;
    private javax.swing.JPanel panelPassportNumber;
    private javax.swing.JPanel panelResultsPage;
    private javax.swing.JTextField passportNumberInput;
    private javax.swing.JLabel passportNumberLabel;
    private javax.swing.JTextField personalNumberInput;
    private javax.swing.JLabel personalNumberLabel;
    private javax.swing.JButton submitButton;
    private javax.swing.JTextField surnameInput;
    private javax.swing.JLabel surnameLabel;
    private javax.swing.JButton yesButton;
    // End of variables declaration//GEN-END:variables
}
